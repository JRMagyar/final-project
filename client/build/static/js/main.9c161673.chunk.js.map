{"version":3,"sources":["components/FlexWrap/index.js","pages/Login/index.js","pages/Dashboard/index.js","pages/Expenses/index.js","pages/Finances/index.js","components/NavBar/index.js","App.js","serviceWorker.js","index.js"],"names":["FlexRow","_ref","children","react_default","a","createElement","className","FlexCol","_ref2","Login","class","data-onsuccess","data-theme","Dashboard","react_responsive_default","minDeviceWidth","matches","Expenses","Finances","Nav","href","App","BrowserRouter","id","NavBar","Switch","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c161673.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nexport function FlexRow({children}){\r\n    return (\r\n        <div className='flex-row'>{children}</div>\r\n    )\r\n}\r\n\r\nexport function FlexCol({children}){\r\n    return (\r\n        <div className='flex-col'>{children}</div>\r\n    )\r\n}","import React from \"react\";\r\nimport { FlexCol } from \"../../components/FlexWrap/index\";\r\nimport \"./style.css\"\r\n\r\nfunction Login(){\r\n    return (\r\n        <FlexCol>\r\n            <article className=\"title-area\">\r\n                <h1>\r\n                    household <br></br> \r\n                    management\r\n                </h1>\r\n            </article>\r\n            <article class=\"g-signin2\" data-onsuccess=\"onSignIn\" data-theme=\"dark\"></article>\r\n        </FlexCol>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport MediaQuery from 'react-responsive';\r\nimport { FlexRow, FlexCol } from \"../../components/FlexWrap/index\";\r\n\r\nfunction Dashboard(){\r\n    return (\r\n        <MediaQuery minDeviceWidth={700}>\r\n            {(matches) => {\r\n                if (matches) {\r\n                    return  <FlexRow>\r\n                    <article className=\"calendar\">\r\n                        area for calendar\r\n                    </article>\r\n                    <article className=\"note-list\">\r\n                        notification list\r\n                    </article>\r\n                    </FlexRow>\r\n                } else {\r\n                    return  <FlexCol>\r\n                    <article className=\"calendar\">\r\n                        area for calendar\r\n                    </article>\r\n                    <article className=\"note-list\">\r\n                        notification list\r\n                    </article>\r\n                    </FlexCol>\r\n                }\r\n            }}\r\n        </MediaQuery>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport MediaQuery from 'react-responsive';\r\nimport { FlexRow, FlexCol } from \"../../components/FlexWrap/index\";\r\n\r\nfunction Expenses(){\r\n    return (\r\n        <MediaQuery minDeviceWidth={700}>\r\n            {(matches) => {\r\n                if (matches) {\r\n                    return  <FlexRow>\r\n                    <article className=\"calendar\">\r\n                        area for calendar\r\n                    </article>\r\n                    <article className=\"note-list\">\r\n                        notification list\r\n                    </article>\r\n                    </FlexRow>\r\n                } else {\r\n                    return  <FlexCol>\r\n                    <article className=\"calendar\">\r\n                        area for calendar\r\n                    </article>\r\n                    <article className=\"note-list\">\r\n                        notification list\r\n                    </article>\r\n                    </FlexCol>\r\n                }\r\n            }}\r\n        </MediaQuery>\r\n    );\r\n}\r\n\r\nexport default Expenses;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport MediaQuery from 'react-responsive';\r\nimport { FlexRow, FlexCol } from \"../../components/FlexWrap/index\";\r\n\r\nfunction Finances(){\r\n    return (\r\n        <MediaQuery minDeviceWidth={700}>\r\n            {(matches) => {\r\n                if (matches) {\r\n                    return  <FlexRow>\r\n                    <article className=\"calendar\">\r\n                        area for calendar\r\n                    </article>\r\n                    <article className=\"note-list\">\r\n                        notification list\r\n                    </article>\r\n                    </FlexRow>\r\n                } else {\r\n                    return  <FlexCol>\r\n                    <article className=\"calendar\">\r\n                        area for calendar\r\n                    </article>\r\n                    <article className=\"note-list\">\r\n                        notification list\r\n                    </article>\r\n                    </FlexCol>\r\n                }\r\n            }}\r\n        </MediaQuery>\r\n    );\r\n}\r\n\r\nexport default Finances;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction Nav() {\r\n    return (\r\n        <nav className=\"main-nav\">\r\n            <a className=\"nav-brand\" href=\"/\">\r\n                Uncle\r\n            </a>\r\n            <a href=\"#menu\">\r\n                &#9776;\r\n            </a>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n\r\n/*This is the Google Signout \"Button\"\r\n<a href=\"#\" onclick=\"signOut();\">Sign out</a>*/","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Login from \"./pages/Login/index\";\r\nimport Dashboard from \"./pages/Dashboard/index\";\r\nimport Expenses from \"./pages/Expenses/index\";\r\nimport Finances from \"./pages/Finances/index\";\r\nimport Nav from \"./components/NavBar/index\"\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <Router>\r\n          <div id=\"root\">\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Login} />\r\n              <Route exact path=\"/dashboard\" component={Dashboard} />\r\n              <Route exact path=\"/expenses\" component={Expenses} />\r\n              <Route exact path=\"/finances\" component={Finances} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      );\r\n    }\r\n  }\r\n  \r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}